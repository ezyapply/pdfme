import {groupElements} from "../src/columnList/helper";
// Generated by Qodo Gen

describe('groupElements', () => {

    // Uses bullet symbol to fill incomplete groups
    it('should fill incomplete groups with bullet symbol with more realistic example', () => {
        const arr = ['*', 'apple', '*', 'banana', '*', 'cherry',
            '*', 'date', '*', 'elderberry'];
        const groupSize = 6;
        const bulletSymbol = '*';
        const result = groupElements(arr, groupSize);
        expect(result)
            .toEqual([['*', 'apple', '*', 'banana', '*', 'cherry'],
                ['*', 'date', '*', 'elderberry', '', '']]);
    });

    // Groups elements into subarrays of specified size
    it('should group elements into subarrays of specified size when array is non-empty', () => {
        const arr = ['a', 'b', 'c', 'd', 'e'];
        const groupSize = 2;
        const bulletSymbol = '*';
        const result = groupElements(arr, groupSize);
        expect(result).toEqual([['a', 'b'], ['c', 'd'], ['e', '']]);
    });

    // Handles empty input array
    it('should return an empty array when input array is empty', () => {
        const arr: string[] = [];
        const groupSize = 3;
        const bulletSymbol = '*';
        const result = groupElements(arr, groupSize);
        expect(result).toEqual([]);
    });

    // Handles arrays with length perfectly divisible by group size
    it('should group elements into subarrays of specified size when array length is perfectly divisible by group size', () => {
        const arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
        const groupSize = 2;
        const bulletSymbol = '*';
        const result = groupElements(arr, groupSize);
        expect(result).toEqual([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h']]);
    });

    // Uses bullet symbol to fill incomplete groups
    it('should fill incomplete groups with bullet symbol', () => {
        const arr = ['apple', 'banana', 'cherry', 'date', 'elderberry'];
        const groupSize = 3;
        const bulletSymbol = '-';
        const result = groupElements(arr, groupSize);
        expect(result).toEqual([['apple', 'banana', 'cherry'], ['date', 'elderberry', '']]);
    });

    // Processes array with length not divisible by group size
    it('should group elements into subarrays of specified size when array length is not divisible by group size', () => {
        const arr = ['a', 'b', 'c', 'd', 'e'];
        const groupSize = 2;
        const bulletSymbol = '*';
        const result = groupElements(arr, groupSize);
        expect(result).toEqual([['a', 'b'], ['c', 'd'], ['e', '']]);
    });
});
